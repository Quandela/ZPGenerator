{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "aab9ba3c",
   "metadata": {},
   "source": [
    "# Photonic Circuits"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bda02f5c",
   "metadata": {},
   "source": [
    "Photonic circuits are critical for linear-optical quantum computing and play a crucial role in quantum communication. At the top-most level, constructing and simulating photonic circuits in ZPGenerator is very similar to [Perceval](https://perceval.quandela.net/), a framework also developed by Quandela. The main difference is that circuits in ZPGenerator cannot be analysed independent of sources and detectors. This is because ZPGenerator is a source-physics simulator as opposed to Perceval, which is a circuit-focused simulator. In ZPGenerator, as in Perceval, the object that combines sources, circuits, and detectors/post-processing is called a Processor."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "ed5097ac",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.779032Z",
     "start_time": "2024-02-09T08:42:44.631021Z"
    }
   },
   "outputs": [],
   "source": [
    "from zpgenerator import *\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b9c58b76",
   "metadata": {},
   "source": [
    "## Building a processor"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75af0a69",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-02T13:31:53.817774Z",
     "start_time": "2023-10-02T13:31:53.802166Z"
    }
   },
   "source": [
    "To simulate a photonic circuit, the first thing to do is create a Processor. The number of discrete processor modes needed will expand dynamically as we add components."
   ],
   "outputs": [],
   "execution_count": 2
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "db4d96d8",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.781980Z",
     "start_time": "2024-02-09T08:42:45.780198Z"
    }
   },
   "outputs": [],
   "source": [
    "qpu = Processor()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daace7fc",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-02T13:31:56.432116Z",
     "start_time": "2023-10-02T13:31:56.420768Z"
    }
   },
   "source": [
    "Once we initialise a processor, we can add components to it using the add() method. We have three types of components to add: (1) sources, (2) circuits, and (3) detectors. Catalogue sources can be easily created using class methods of the Source class. These components have one or more input modes that are vacuum by default, and one or more output modes that contain pulses of light. Sources are usually placed at the beginning of a processor but ZPGenerator also handles cascaded quantum systems where the emission from one source can be used to drive another.\n",
    "\n",
    "To demonstrate a simple example, we can simulate the Hong-Ou-Mandel (HOM) bunching effect [[C. K. Hong, Z. Y. Ou, and L. Mandel, Phys. Rev. Lett. 59, 2044 (1987)](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.59.2044)]. To do this, we can add a source of perfect single photon Fock states to modes 0 and 1 of our processor."
   ],
   "outputs": [],
   "execution_count": 3
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "outputs": [],
   "source": [
    "qpu.add(0, Source.fock(1))\n",
    "qpu.add(1, Source.fock(1))"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.811965Z",
     "start_time": "2024-02-09T08:42:45.782305Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Next, we want to add a beam splitter so that our two single photons will interfere. To do this, we can use class methods from the Circuit class to access catalogue linear-optical components."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "outputs": [],
   "source": [
    "qpu.add(0, Circuit.bs())"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.814494Z",
     "start_time": "2024-02-09T08:42:45.812616Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Finally, we need to place our detectors to monitor the output modes of the beam splitter. This is done using the Detector class that, like the Source and Circuit classes, has class methods to create different catalogue detector types. Since we wish to observe the HOM bunching effect, and we have only two photons, we can use photon-number resolving (PNR) detectors with a resolution of 2."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f776af4a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.820464Z",
     "start_time": "2024-02-09T08:42:45.815793Z"
    }
   },
   "outputs": [],
   "source": [
    "qpu.add(0, Detector.pnr(2))\n",
    "qpu.add(1, Detector.pnr(2))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3290c8c3",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-02T13:31:58.119485Z",
     "start_time": "2023-10-02T13:31:58.114144Z"
    }
   },
   "source": [
    "Now that we have constructed our processor, we can visualise the basic structure using the display() method. More advanced visualisation methods will be implemented in future updates."
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "<drawsvg.drawing.Drawing at 0x28b8ed040>",
      "image/svg+xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n     width=\"257.5\" height=\"156.25\" viewBox=\"-28.0 0 206.0 125.0\">\n<defs>\n</defs>\n<path d=\"M10,25 L25,25\" stroke-width=\"3\" stroke=\"darkred\" stroke-linejoin=\"miter\" fill=\"none\" />\n<path d=\"M10,75 L25,75\" stroke-width=\"3\" stroke=\"darkred\" stroke-linejoin=\"miter\" fill=\"none\" />\n<path d=\"M25,25 L53,25 L72,44\" stroke=\"darkred\" stroke-width=\"3\" fill=\"none\" />\n<path d=\"M78,44 L97,25 L125,25\" stroke=\"darkred\" stroke-width=\"3\" fill=\"none\" />\n<path d=\"M25,75 L53,75 L72,56\" stroke=\"darkred\" stroke-width=\"3\" fill=\"none\" />\n<path d=\"M78,56 L97,75 L125,75\" stroke=\"darkred\" stroke-width=\"3\" fill=\"none\" />\n<path d=\"M50,43 L100,43 L100,57 L50,57 Z\" stroke=\"black\" fill=\"black\" stroke-linejoin=\"miter\" />\n<text x=\"75\" y=\"85\" font-size=\"7\" text-anchor=\"middle\"></text>\n<text x=\"75\" y=\"26\" font-size=\"7\" text-anchor=\"middle\"></text>\n<path d=\"M50,43 L100,43 L100,47 L50,47 Z\" stroke=\"black\" fill=\"lightgray\" stroke-linejoin=\"miter\" />\n<path d=\"M93,50 L103,50 L103,60 L93,60 Z\" stroke=\"black\" fill=\"thistle\" stroke-linejoin=\"miter\" />\n<text x=\"98\" y=\"57\" font-size=\"6\" text-anchor=\"middle\">Rx</text>\n<path d=\"M125,25 L140,25\" stroke-width=\"3\" stroke=\"darkred\" stroke-linejoin=\"miter\" fill=\"none\" />\n<path d=\"M125,75 L140,75\" stroke-width=\"3\" stroke=\"darkred\" stroke-linejoin=\"miter\" fill=\"none\" />\n<text x=\"150\" y=\"28\" font-size=\"6\" text-anchor=\"end\">0</text>\n<text x=\"150\" y=\"78\" font-size=\"6\" text-anchor=\"end\">1</text>\n<text x=\"0\" y=\"28\" font-size=\"6\" text-anchor=\"start\">0</text>\n<text x=\"0\" y=\"78\" font-size=\"6\" text-anchor=\"start\">1</text>\n</svg>"
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "execution_count": 4
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "eeecb8e9",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.823540Z",
     "start_time": "2024-02-09T08:42:45.821710Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "        _____________\n",
      "|0>----|  Component  |----D~\n",
      "|0>----|             |----D~\n",
      "        ‾‾‾‾‾‾‾‾‾‾‾‾‾\n"
     ]
    }
   ],
   "source": [
    "qpu.display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "681276e6",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-02T13:31:59.618657Z",
     "start_time": "2023-10-02T13:31:59.608819Z"
    }
   },
   "source": [
    "The total two-mode processor begins with vacuum inputs, one input to each source. The component represents the combination of two Fock state sources and a beam splitter. Finally, the detectors indicate that the output modes are monitored. To break this down, we can also display all the elements composing the component by setting elements=True when displaying the processor."
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "   0        (source 0) -- (circuit) -- (detector)     \n",
      "   1        (source 1) -- (circuit) -- (detector)     \n"
     ]
    }
   ],
   "execution_count": 5
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "39043852",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.825882Z",
     "start_time": "2024-02-09T08:42:45.824032Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "        _______\n",
      "|0>--(0|  |1>  |0)--\n",
      "        ‾‾‾‾‾‾‾\n",
      "\n",
      "        _______\n",
      "|0>--(1|  |1>  |1)--\n",
      "        ‾‾‾‾‾‾‾\n",
      "\n",
      "        ______\n",
      "   --(0|  BS  |0)--\n",
      "   --(1|      |1)--\n",
      "        ‾‾‾‾‾‾\n",
      "\n",
      "        ________\n",
      "   --(0|  PNRD  |0)--D~\n",
      "        ‾‾‾‾‾‾‾‾\n",
      "\n",
      "        ________\n",
      "   --(1|  PNRD  |1)--D~\n",
      "        ‾‾‾‾‾‾‾‾\n"
     ]
    }
   ],
   "source": [
    "qpu.display(elements=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2ce35153",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-02T13:32:00.799123Z",
     "start_time": "2023-10-02T13:32:00.792490Z"
    }
   },
   "source": [
    "This function illustrates each element, or subcomponent, with its name and also the arrangement of ports and their labels connecting the different elements together. Note that sources and detectors are just special types of components where all inputs are vacuum, or all outputs are monitored, respectively."
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "   0 (Fock |1> source 0) -- (circuit) -- (PNRD, L)      \n",
      "   1 (Fock |1> source 1) -- (circuit) -- (PNRD, R)      \n"
     ]
    }
   ],
   "execution_count": 6
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Simulating correlations"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Now that we have built the processor, the next step is to simulate it. To do this, we can ask for the probabilities using the probs() method of the Processor class."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b83a958a",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.874340Z",
     "start_time": "2024-02-09T08:42:45.827717Z"
    }
   },
   "outputs": [],
   "source": [
    "probabilities = qpu.probs()"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "Detection probabilities are returned as a CorrelationDistribution object that takes tuples of positive integers as keys. To check that we have HOM bunching, we must ensure that the coincidence count outcome corresponding to the tuple (1, 1) has a zero probability of occurring."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "outputs": [
    {
     "data": {
      "text/plain": "True"
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "probabilities[1, 1] == 0"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.878134Z",
     "start_time": "2024-02-09T08:42:45.875918Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "As expected, our processor never produces the (1, 1) detection pattern due to the HOM bunching effect. We can also diplay the distribution to see all non-negligible probabilities."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "2 0     | 0.50000\n",
      "0 2     | 0.50000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "probabilities.display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.880563Z",
     "start_time": "2024-02-09T08:42:45.878599Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Because we are using perfect source of single-photon Fock states and we have not included any losses, we never observe single-photon outcomes or vacuum outcomes. The photon-number patterns registered by each detector are ordered, by default, according to their spatial mode. That is, the pattern (2, 0) indicates that 'PNRD' monitoring mode 0 detected 2 photons while 'PNRD' monitoring mode 1 detected 0 photons.\n",
    "\n",
    "It's important to note that, unlike Perceval, detection probabilities _do not_ always represent state probabilities. Hence, ZPGenerator uses the notation '2 0' and not '|2,0>' to represent outcomes. In ZPGenerator, the detection probabilities are integrated over time, and thus can only be considered Fock state probabilities if the state of light is actually in a pure Fock state. Since we are using a perfect source of Fock states in this first example, we can equate measuring '2 0' with measuring '|2,0>' but this is not always true."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "<h5 ><font color='black'>A note on detector resolution </font></h5>"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "A very important point about using PNR detectors in ZPGenerator is that they must be given a resolution as large or larger than the largest photon number that it could measure with a non-negligible probability, or else the outcome probabilities will be modified by aliasing. To demonstrate this effect, consider what happens when simulating a 3-photon Fock states using a PNR detector with a resolution of 2."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "0       | 1.00000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "qpu = Processor()\n",
    "qpu.add(0, Source.fock(3))\n",
    "qpu.add(0, Detector.pnr(2))\n",
    "qpu.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.914413Z",
     "start_time": "2024-02-09T08:42:45.881805Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Notice that we expected 3 photons with a probability of 1, but measured 0 photons instead. This is because any detection probability that exceeds the resolution 'wraps around' and adds to the distribution, i.e., modulo the resolution. This behaviour is fully expected based on the theory of how the backend works, and can be a useful feature in some cases. However, it can cause confusion if not taken into account when simulating a processor."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "id": "a9ccf80b",
   "metadata": {},
   "source": [
    "## Threshold detection"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "An interesting feature of ZPGenerator is the ability to simulate threshold detectors without first simulating all the number-resolved outcomes. Threshold detectors detect either zero photons (no click) or at least one photon (click). This type of detector is commonly used to model avalanche photodiode (APD) detectors and non-resolving superconducting nanowire single-photon detectors (SNSPD). Unlike photon-number resolved outcomes, ZPGenerator will not return aliased distributions if the number of photons incident exceeds the threshold detector resolution of 1. This is because threshold detection produces a finite set of outcomes that requires no truncation.\n",
    "\n",
    "Let's quickly rewrite the same HOM processor, but now using threshold detectors. In this case, we will use the shorthand // notation to add components and specify lists of integers to add a component to multiple modes at the same time."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "a517c95e",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:45.959749Z",
     "start_time": "2024-02-09T08:42:45.911357Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "0 1     | 0.50000\n",
      "1 0     | 0.50000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "qpu = Processor() // ([0, 1], Source.fock(1)) // Circuit.bs() // ([0, 1], Detector.threshold())\n",
    "qpu.probs().display()"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "When using threshold detectors, a 0 represents the same outcome as it does for PNR detectors. However, a 1 now indicates at least one photon was detected. Comparing this with our number-resolved simulation of the HOM effect, we can see that threshold detectors register 2-photon outcomes as a single click. In many cases, threshold detection is sufficient to understand how the source and circuit interact, such as this HOM interference experiment where we only want to identify the absence of coincidence counts. This is why, in practice, HOM interference experiments used to characterise single-photon sources are performed using threshold detectors."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "In general, ZPGenerator also allows us to mix and match different sources and detectors, or even leave many inputs or outputs empty. As in permanent-based simulators, like Perceval, the time needed to simulate an experiment using ZPGenerator depends on the Hilbert space size of the input states or sources, and the number of outcomes for the outputs being monitored, but not the size of the circuit."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "16df3767",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:47.621948Z",
     "start_time": "2024-02-09T08:42:45.955595Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "0 0 0   | 0.46479\n",
      "0 1 0   | 0.09099\n",
      "0 2 0   | 0.01460\n",
      "0 3 0   | 0.00178\n",
      "0 4 0   | 0.00013\n",
      "0 0 1   | 0.12664\n",
      "0 1 1   | 0.02085\n",
      "0 2 1   | 0.00320\n",
      "0 3 1   | 0.00030\n",
      "0 4 1   | 0.00002\n",
      "1 0 0   | 0.19182\n",
      "1 1 0   | 0.04545\n",
      "1 2 0   | 0.00668\n",
      "1 3 0   | 0.00066\n",
      "1 4 0   | 0.00004\n",
      "1 0 1   | 0.02436\n",
      "1 1 1   | 0.00663\n",
      "1 2 1   | 0.00100\n",
      "1 3 1   | 0.00007\n",
      "\n"
     ]
    }
   ],
   "source": [
    "qpu = Processor()\n",
    "qpu.add(0, Source.fock(1))\n",
    "qpu.add(7, Source.fock(3))\n",
    "qpu.add(15, Source.fock(2))\n",
    "qpu.add(0, Circuit.haar_random(24))\n",
    "qpu.add(0, Detector.threshold(bin_name='TD 1'))\n",
    "qpu.add(12, Detector.threshold(bin_name='TD 2'))\n",
    "qpu.add(8, Detector.pnr(6, bin_name='PNRD'))\n",
    "qpu.probs().display()"
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "In more complicated experiments such as the example above, it is useful to assign detectors to a unique bin using the 'bin_name' keyword, as done above. Then, we can always look to see what the order of the outcomes in the pattern represent by checking the bin_labels property of the processor."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "outputs": [
    {
     "data": {
      "text/plain": "['TD 1', 'PNRD', 'TD 2']"
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qpu.bin_labels"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:47.627531Z",
     "start_time": "2024-02-09T08:42:47.624573Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "The bin_name keyword also allows detectors to serve more complex functionalities than just monitoring a single mode for the entirety of the experiment. We may have multiple detectors monitoring the same mode but at different times, or one detector monitoring multiple modes simultaneously and binning the results together."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Binned detectors"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Sometimes we do not need to know the individual outcomes for different detectors, but instead only need to know their summed results. For example, this technique of binning detectors together can be used to validate Boson Sampling results [[B. Seron, et al., arXiv: 2212.09643 (2022)](https://arxiv.org/abs/2212.09643)]. To bin the results of two detectors in ZPGenerator, we must assign them the same bin name and also ensure that they are the same detector type and have the same resolution. Let's take a look at 4 photons passing through a 24-mode Haar random circuit, but divide the 24 outputs into two groups. Note that, without binning, there are 17750 possible outcomes. But, by binning into two groups, we have just 5 possible outcomes."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "4 0     | 0.08011\n",
      "3 1     | 0.25627\n",
      "2 2     | 0.35144\n",
      "1 3     | 0.24149\n",
      "0 4     | 0.07069\n",
      "\n"
     ]
    }
   ],
   "source": [
    "qpu = Processor()\n",
    "qpu.add([0, 1, 2, 3], Source.fock(1))\n",
    "qpu.add(0, Circuit.haar_random(24))\n",
    "qpu.add(list(range(0, 12)), Detector.pnr(4, bin_name='bin 0'))\n",
    "qpu.add(list(range(12, 24)), Detector.pnr(4, bin_name='bin 1'))\n",
    "qpu.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:54.644850Z",
     "start_time": "2024-02-09T08:42:47.627043Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "At this point, it is worth mentioning that ZPGenerator is generally a lot slower than Perceval for problems that both frameworks can tackle. This is because ZPGenerator is designed to solve general noisy time-dynamic problems, which can be overkill when simulating ideal photons as in the above scenarios. However, the backend is extremely flexible and can provide solutions to a wide range of realistic experimental setups that cannot be simulated using Perceval."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Imperfect sources"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "id": "73a9e209",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-02T13:32:21.834321Z",
     "start_time": "2023-10-02T13:32:21.505959Z"
    }
   },
   "source": [
    "Without going too deep into source physics, we can also use ZPGenerator to simulate a wide variety of realistic source types. The easiest way to accomplish this is to use the different catalogue sources available from the Source class. To demonstrate, let's revisit the Hong-Ou-Mandel scenario but using a more realistic source type that includes source inefficiency, multi-photon emission, and non-ideal indistinguishability. To obtain a source that produces a photon with known efficiency, integrated intensity correlation ($g^{(2)}), and amount of indistinguishability, we can use the perceval() source model.\n",
    "\n",
    "This source type is based on a simplified noise model of a near-ideal single photon produced by the fast excitation of a two-level emitter. Thus, we get at most two photons from each source, and the additional photon of the multiphoton component is completely distinguishable from the single photon component as demonstrated in [[H. Ollivier et al., Phys. Rev. Lett. 126, 063602 (2021)](https://journals.aps.org/prl/abstract/10.1103/PhysRevLett.126.063602)]. It is named as such because it is the same model that is used in the Source class in Perceval."
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outcome:  Probability\n",
      "00:  0.02250\n",
      "10:  0.12467\n",
      "20:  0.32826\n",
      "30:  0.00745\n",
      "40:  0.00008\n",
      "01:  0.12467\n",
      "11:  0.03992\n",
      "21:  0.00823\n",
      "02:  0.32826\n",
      "12:  0.00823\n",
      "22:  0.00017\n",
      "03:  0.00745\n",
      "04:  0.00008\n",
      "\n"
     ]
    }
   ],
   "execution_count": 15
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "7087de45",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:55.138015Z",
     "start_time": "2024-02-09T08:42:54.645989Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "0 0     | 0.02250\n",
      "1 0     | 0.12467\n",
      "2 0     | 0.32826\n",
      "3 0     | 0.00745\n",
      "4 0     | 0.00009\n",
      "0 1     | 0.12467\n",
      "1 1     | 0.03992\n",
      "2 1     | 0.00823\n",
      "0 2     | 0.32826\n",
      "1 2     | 0.00823\n",
      "2 2     | 0.00017\n",
      "0 3     | 0.00745\n",
      "0 4     | 0.00009\n",
      "\n"
     ]
    }
   ],
   "source": [
    "source = Source.perceval(emission_probability=0.85,\n",
    "                         multiphoton_component=0.05,\n",
    "                         indistinguishability=0.9)\n",
    "qpu = Processor()\n",
    "qpu.add([0, 1], source)\n",
    "qpu.add(0, Circuit.bs())\n",
    "qpu.add([0, 1], Detector.pnr(4))\n",
    "qpu.probs().display()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "34febe4d",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-02T13:32:44.057384Z",
     "start_time": "2023-10-02T13:32:43.545019Z"
    }
   },
   "source": [
    "By going one step deeper into the physics, we can also modify the physical parameters of catalogue components to create imperfections."
   ],
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Outcome:  Probability\n",
      "40:  0.37500\n",
      "22:  0.25000\n",
      "04:  0.37500\n",
      "\n",
      "TVD:  0.0\n",
      "\n",
      "Outcome:  Probability\n",
      "40:  0.34170\n",
      "22:  0.23204\n",
      "04:  0.34170\n",
      "31:  0.04228\n",
      "13:  0.04228\n",
      "\n",
      "TVD:  0.04227798753216591\n"
     ]
    }
   ],
   "execution_count": 16
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Parameters"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "ZPGenerator is built to handle components that may be controlled by many different parameters. This is particularly important once we start building new components and time-dynamic control pulses in a composable way. In this section, we will take a look at the basic methods we can use to modify parameters controlling the simulation model.\n",
    "\n",
    "All components come with a set of default parameters that can be overwritten when simulating the processor. To see what parameters we can modify, let's once again build a basic HOM setup and look at the list of parameters automatically included by the included catalogue components. This time, we will define our components first, and then add them to the processor using the shorthand // symbol."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['angle', 'decay', 'delay', 'dephasing', 'efficiency', 'resonance']\n"
     ]
    }
   ],
   "source": [
    "source = Source.fock(1)\n",
    "circuit = Circuit.bs()\n",
    "detector = Detector.pnr(2)\n",
    "\n",
    "qpu = Processor() // ([0, 1], source) // (0, circuit) // ([0, 1], detector)\n",
    "\n",
    "print(qpu.parameters)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:55.148473Z",
     "start_time": "2024-02-09T08:42:55.139031Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "By printing the parameters property of the processor, we can see there are many parameters and perhaps their functionalities are not clear because we don't know which components they belong to. One option is to check the parameters of each component individually."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['decay', 'delay', 'dephasing', 'efficiency', 'resonance']\n",
      "['angle']\n",
      "['efficiency']\n"
     ]
    }
   ],
   "source": [
    "print(source.parameters)\n",
    "print(circuit.parameters)\n",
    "print(detector.parameters)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:55.151040Z",
     "start_time": "2024-02-09T08:42:55.149192Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "We can see that each component has its own list of parameters, and together they make all the parameters of the processor. However, we must be _very careful_ because both the source and detector component have the same parameter \"efficiency\". So, if we change the efficiency parameter, it will apply twice---once at emission and once at detection. To avoid parameter clashes like this, it is important to always give each component a unique name so that we can control their parameters individually."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['beamsplitter/angle', 'detector/efficiency', 'source/decay', 'source/delay', 'source/dephasing', 'source/efficiency', 'source/resonance']\n"
     ]
    }
   ],
   "source": [
    "source.name = 'source'\n",
    "circuit.name = 'beamsplitter'\n",
    "detector.name = 'detector'\n",
    "print(qpu.parameters)"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:55.153968Z",
     "start_time": "2024-02-09T08:42:55.152034Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Now we can easily see which parameters belong to which component. More importantly, we can specify which parameter to modify. Before doing this, let's take a look at what the default parameters are."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "outputs": [
    {
     "data": {
      "text/plain": "{'source/resonance': 0.0,\n 'source/dephasing': 0.0,\n 'source/delay': 0.0,\n 'source/decay': 1.0,\n 'source/efficiency': 1,\n 'beamsplitter/angle': 0.7853981633974483,\n 'detector/efficiency': 1}"
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qpu.default_parameters"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:55.189908Z",
     "start_time": "2024-02-09T08:42:55.154078Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Here, we can see that our source is emitting light that is resonant (resonance = 0) with respect to the global reference. There is also no dephasing impacting the amplitude coherence of the light (dephasing = 0), the 'delay' parameter being 0 indicates that the emission occurs at time t=0, and the decay rate of the source (governing the emission timescale) is set to 1. The source also has an efficiency parameter, which can represent a collection efficiency, which is set to 1 by default. The beamsplitter is has a 50:50 ratio by default, corresponding to an angle of $\\pi/4$. Finally, the detector has an efficiency of 1.\n",
    "\n",
    "The majority of the time, we don't care to modify all these default parameters. But, perhaps we want to modify only one or two of them. To do this, we simply specify the parameter to modify when simulating the processor. Let's increase the source dephasing and see how it impacts the HOM bunching effect."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "2 0     | 0.47727\n",
      "1 1     | 0.04545\n",
      "0 2     | 0.47727\n",
      "\n"
     ]
    }
   ],
   "source": [
    "qpu.probs(parameters={'source/dephasing': 0.1}).display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:55.225830Z",
     "start_time": "2024-02-09T08:42:55.159563Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "By specifying a new value for 'source/dephasing' we will add some pure dephasing to the fock state, which leads to some amount of distinguishability, preventing perfect HOM bunching, and thus we observe '1 1' coincidence counts.\n",
    "\n",
    "The way parameters work in ZPGenerator allow us to also specify the common part of one or more parameters to modify all parameters with that common name. For example, we have two 'efficiency' parameters: 'source/efficiency' and 'detector/efficiency'. We can modify them individually using their full name, or we can modify them both at the same time using their common name."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "0 0     | 0.25000\n",
      "1 0     | 0.25000\n",
      "2 0     | 0.12500\n",
      "0 1     | 0.25000\n",
      "0 2     | 0.12500\n",
      "\n",
      "Pattern | Probability\n",
      "0 0     | 0.56250\n",
      "1 0     | 0.18750\n",
      "2 0     | 0.03125\n",
      "0 1     | 0.18750\n",
      "0 2     | 0.03125\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": "True"
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "qpu.probs(parameters={'source/efficiency': 0.5}).display()\n",
    "qpu.probs(parameters={'efficiency': 0.5}).display()\n",
    "qpu.probs(parameters={'efficiency': 0.5}) == qpu.probs(parameters={'source/efficiency': 0.5, 'detector/efficiency': 0.5})"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:55.423884Z",
     "start_time": "2024-02-09T08:42:55.229066Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "As you can see, modifying 'source/efficiency' to 0.5 will reduce the emission efficiency of the sources to 50%. However, by modifying 'efficiency' to 0.5, we will change both 'source/efficiency' and 'detector/efficiency', resulting in more losses.\n",
    "\n",
    "If two components have parameters with the same name but with different default values, no parameter clashes will occur. Thus, another way to avoid parameter clashes is to assign different default parameters to components when creating them or to update their default parameters before simulating the processor.\n",
    "\n",
    "In the next section, we will use this approach to take a look at modifying the 'delay' parameter, but for each source independently."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Time dynamics"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Since ZPGenerator is based on a time-dynamic backend, manipulating relative temporal properties of sources is natural. For example, by shifting the relative delay of the photons as above, we can see that the photons are partially distinguishable allowing for '1 1' coincidences similar to the case when we added dephasing."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "2 0     | 0.47621\n",
      "1 1     | 0.04758\n",
      "0 2     | 0.47621\n",
      "\n"
     ]
    }
   ],
   "source": [
    "beamsplitter = Circuit.bs()\n",
    "detector = Detector.pnr(2)\n",
    "\n",
    "qpu = Processor()\n",
    "qpu.add(0, Source.fock(1, parameters={'delay': 0}))\n",
    "qpu.add(0, Source.fock(1, parameters={'delay': 0.1}))\n",
    "qpu = qpu // beamsplitter // ([0, 1], detector)\n",
    "\n",
    "qpu.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:42:55.560706Z",
     "start_time": "2024-02-09T08:42:55.439873Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "id": "152658e5",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2023-10-02T13:32:56.190823Z",
     "start_time": "2023-10-02T13:32:48.585024Z"
    }
   },
   "source": [
    "Setting parameters in this way is convenient because we do not need to name each component, but we have to be careful to note that it only impacts the default values. If we try to modify 'delay', it will modify both the parameter for both sources, which eliminates the relative delay and restores HOM bunching.\n",
    "\n",
    "To get a better idea of what is happening in the above simulation, we can sweep the delay of one photon across the other and see how the anti-bunching probability is modified. To make things more interesting, let's also compare it to delaying a wavepacket when we have additional pure dephasing."
   ],
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "execution_count": 18
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "2320c8f7",
   "metadata": {
    "ExecuteTime": {
     "end_time": "2024-02-09T08:43:02.833431Z",
     "start_time": "2024-02-09T08:42:55.579739Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "qpu = Processor()\n",
    "qpu.add(0, Source.fock(1, name='source 0'))\n",
    "qpu.add(1, Source.fock(1, name='source 1'))\n",
    "qpu.add(0, Circuit.bs())\n",
    "qpu.add([0, 1], Detector.threshold())\n",
    "\n",
    "def pr11(delay: float, dephasing: float):  # make a function to simulate the coincidence probability\n",
    "    return qpu.probs(parameters={'source 1/delay': delay, 'dephasing': dephasing})[1, 1]\n",
    "\n",
    "# Let's generate data for a set of delays and for three different regimes of dephasing\n",
    "delays = np.linspace(-4, 4, 21)\n",
    "coinc_indi = [pr11(tau, 0.0) for tau in delays]  # no dephasing (indistinguishable)\n",
    "coinc_deph = [pr11(tau, 0.5) for tau in delays]  # some dephasing (partially distinguishable)\n",
    "coinc_dist = [pr11(tau, 10**3) for tau in delays]  # lots of dephasing --> distinguishable\n",
    "\n",
    "# Now let's plot them to compare!\n",
    "plt.plot(delays, coinc_indi, label = 'Indistinguishable')\n",
    "plt.plot(delays, coinc_deph, label = 'Partially distinguishable')\n",
    "plt.plot(delays, coinc_dist, label = 'Fully distinguishable')\n",
    "plt.xlabel('Delay, $\\\\tau$')\n",
    "plt.ylabel('HOM coincidence probability, $p_{11}(\\\\tau)$')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e9d3824",
   "metadata": {},
   "source": [
    "When there is no dephasing, we see a clear dip in the coincience probability $p_{11}$ down to zero when the delay $\\tau$ is zero. When we add some dephasing, there is still a dip, but it does not go all the way to $p_{11}=0$. In the case where dephasing is very large, we can see that there is no dip at all, corresponding to completely distinguishable photons regardless of how they overlap in time."
   ]
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Losses"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "ZPGenerator also naturally takes into account losses, both uniform and non-uniform, at no additional computational cost. The easiest way to control losses is to add loss components in the circuit. As an example, let's look at a single photon passing through a Mach-Zehnder interferometer with unbalanced losses."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "0 1     | 1.00000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "qpu = Processor() // Source.fock(1) // Circuit.bs() // Circuit.loss(name='arm 0') // Circuit.bs() // ([0, 1], Detector.threshold())\n",
    "qpu.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:43:02.880806Z",
     "start_time": "2024-02-09T08:43:02.831450Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "By default, a circuit loss component will have perfect transmission. In that case, we can see above that the perfect single-photon interference that results in only '0 1' outcomes at the output of the interferometer. However, if we add a small amount of losses, we can disturb the interference. Not only do we reduce '0 1' outcomes, but we can actually _increase_ '1 0' outcomes!"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "probs01 = []\n",
    "probs10 = []\n",
    "efficiencies = [0] + [10**eta for eta in np.linspace(-2, 0, 20)]\n",
    "for eta in efficiencies:\n",
    "    prbs = qpu.probs(parameters={'arm 0/efficiency': eta})\n",
    "    probs01.append(prbs[0, 1])\n",
    "    probs10.append(prbs[1, 0])\n",
    "\n",
    "plt.plot(efficiencies, probs01, label = 'Pr(01)')\n",
    "plt.plot(efficiencies, probs10, label = 'Pr(10)')\n",
    "plt.xlabel('Arm 0 efficiency')\n",
    "plt.ylabel('Detection probability')\n",
    "plt.legend()\n",
    "plt.show()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-09T08:43:03.387571Z",
     "start_time": "2024-02-09T08:43:02.882465Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "This interesting phenomenon is behind a paradox called the 'interaction free measurement'. Notice that, by detecting the outcome '1 0', we can infer the presence of an absorbing object in one arm of the interferometer. However, since we only used a single photon, and we detected that photon, the photon never interacted with the absorbing object! This interaction free measurement occurs with 25\\% probability in the limit of a perfectly absorbing object."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [],
   "metadata": {
    "collapsed": false
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
