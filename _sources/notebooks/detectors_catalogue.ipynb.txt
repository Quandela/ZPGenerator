{
 "cells": [
  {
   "cell_type": "markdown",
   "source": [
    "# Detectors"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Here we summarise the catalogue detector components and their underlying physical models."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "|               Name               |   Method    | Modes | Measurement Bins | Outcomes |\n",
    "|:--------------------------------:|:-----------:|:-----:|:----------------:|:--------:|\n",
    "| Photon-number resolving detector |    `pnr`    |   1   |        1         |    3+    |\n",
    "|        Threshold detector        | `threshold` |   1   |        1         |  1 or 2  |\n",
    "|         Vacuum detector          |  `vacuum`   |   1   |        1         |    1     |\n",
    "|         Parity detector          |  `parity`   |   1   |        1         |    1     |\n",
    "|     Time-partition detector      | `partition` |   1   |        1+        |    1+    |"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "The above table summarises the number of measurement bins, the number of possible outcomes for each measurement bin, and the number of modes that the detector monitors. The following sections give more details about each detector type."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "outputs": [],
   "source": [
    "from zpgenerator import *"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:25.822135Z",
     "start_time": "2024-02-14T23:01:25.751113Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Number-Resolving"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "The photon-number-resolving detector (PNRD) provides the probability $p(n)$ of observing $n$ photons at that detector during the detector gate time, and after accounting for detector inefficiency. In practice, the number-resolving detector has a truncation $N$ above which it cannot resolve the number of photons properly. The implementation of this detector follows the [ZPG method](https://journals.aps.org/pra/abstract/10.1103/PhysRevA.109.023713), where a Fourier transform is applied to recover the probabilities. A consequence of this approach is that the actual distribution returned by a 'pnr' detector is accumulated modulo $N$. That is, the outcome $o(n)$ of the detector is\n",
    "$$\n",
    "o(n) = \\sum_{k| k~\\text{mod}~N = n}p(k)\n",
    "$$\n",
    "\n",
    "If $N$ is large enough, then $o(n)\\simeq p(n)$. Otherwise, there is an apparent aliasing effect in the photon number distribution."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "All detectors have an 'efficiency' parameter. The default efficiency is 1, unless the object is created using the efficiency keyword."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "outputs": [
    {
     "data": {
      "text/plain": "{'efficiency': 1}"
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d = Detector.pnr(resolution=1)\n",
    "d.default_parameters"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:25.862821Z",
     "start_time": "2024-02-14T23:01:25.759968Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "The resolution should be chosen large enough to trust that the distribution converges to zero."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "0       | 0.36791\n",
      "1       | 0.36788\n",
      "2       | 0.18393\n",
      "3       | 0.06131\n",
      "4       | 0.01533\n",
      "5       | 0.00307\n",
      "6       | 0.00051\n",
      "7       | 0.00007\n",
      "\n"
     ]
    }
   ],
   "source": [
    "source = Source.shaped_laser(parameters={'amplitude': 1})\n",
    "p = Processor() // source // Detector.pnr(resolution=7)\n",
    "p.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:25.867930Z",
     "start_time": "2024-02-14T23:01:25.762875Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "A resolution that is too small to capture all non-negligible probabilities will be impacted by aliasing (the distribution will 'wrap around')."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "outputs": [
    {
     "data": {
      "text/plain": "<Figure size 640x480 with 1 Axes>",
      "image/png": ""
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "source = Source.shaped_laser(parameters={'amplitude': 5})\n",
    "p = Processor() // source // Detector.pnr(resolution=35)\n",
    "pn = p.probs()\n",
    "plt.plot(pn.keys(), pn.values())\n",
    "plt.xlabel('Number of photons')\n",
    "plt.ylabel('Outcome probability, o(n)')\n",
    "plt.show()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:26.023371Z",
     "start_time": "2024-02-14T23:01:25.799157Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Threshold"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "In some cases, it is not necessary to fully resolve the number of photons. For example, some post-selected linear-optical gates only require the observation of zero photons. Another example is that of measuring the Hong-Ou-Mandel visibility, where it is only necessary to verify the absence of light to estimate a high indistinguishability. A threshold detector (also called an on/off detector) provides the probability of observing at least one photon at that detector during the detector gate time, and after accounting for detector inefficiency."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "A threshold detector never experiences aliasing because it requires no truncation."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "0       | 0.36790\n",
      "1       | 0.63211\n",
      "\n"
     ]
    }
   ],
   "source": [
    "source = Source.shaped_laser(parameters={'amplitude': 1})\n",
    "p = Processor() // source // Detector.threshold()\n",
    "p.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:26.110658Z",
     "start_time": "2024-02-14T23:01:26.026273Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Vacuum"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "A vacuum detector is a fictitious detector that returns only the outcome corresponding to measuring zero photons, thus potentially speeding up the simulation. This is particularly useful when looking at the behaviour of a circuit conditioned on that absence of light at a certain detector. However, because it ignores all cases where photons arrived, the resulting distribution is not normalised."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Expectation\n",
      "0 0     | 0.01995\n",
      "0 1     | 0.03710\n",
      "0 2     | 0.03675\n",
      "0 3     | 0.02445\n",
      "0 4     | 0.01222\n",
      "0 5     | 0.00488\n",
      "\n"
     ]
    }
   ],
   "source": [
    "source = Source.shaped_laser(parameters={'amplitude': 2})\n",
    "p = Processor() // source // Circuit.bs() // (0, Detector.vacuum()) // (1, Detector.pnr(5))\n",
    "p.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:26.203425Z",
     "start_time": "2024-02-14T23:01:26.110888Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Parity"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "As introduced in the [Wigner Functions](wigner_functions.ipynb) advanced tutorial, the parity detector returns the parity expectation value of the detected photon number distribution. This can be used to obtain the value of the light's Wigner function at the origin of phase space.\n",
    "\n",
    "Instead of an integer, the outcome of the parity detector is labeled with 'p'."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Expectation\n",
      "p       | 0.36790\n",
      "\n"
     ]
    }
   ],
   "source": [
    "source = Source.shaped_laser(parameters={'amplitude': 1})\n",
    "p = Processor() // source // Circuit.bs() // Detector.parity()\n",
    "p.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:26.242766Z",
     "start_time": "2024-02-14T23:01:26.240539Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "The parity detector can also be combined with the 'pnr' detector type to get conditional measurements of the parity expectation value."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Expectation\n",
      "p 0     | -0.50000\n",
      "p 1     | 0.50000\n",
      "\n"
     ]
    }
   ],
   "source": [
    "source = Source.shaped_laser(parameters={'amplitude': 1})\n",
    "p = Processor() // Source.fock(1) // Circuit.bs() // Detector.parity() // (1, Detector.pnr(3))\n",
    "pn = p.probs()\n",
    "pn.display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:26.304494Z",
     "start_time": "2024-02-14T23:01:26.273967Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "By splitting a photon on a beam splitter, we can see that the sign of the parity of the first output depends on the number of photons detected at the second output. These values are also multiplied by the probability of detection, which is 1/2 for each outcome using a balanced beam splitter."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "## Time Partition"
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Many simulations of photonic experiments consider correlations between light emitted at different times. For example, see the [Fibonacci States](fibonacci_states.ipynb) and [Entanglment Generation](entanglement_generation.ipynb) tutorials. The way this can be done in ZPGenerator is to add a detector that partitions time into different bins.\n",
    "\n",
    "To partition time, we can simply pass a list of times that define the thresholds between time bins. When photons are detected among these thresholds will determine which bin they will be tallied into. Note that photons that arrive anytime before the first threshold are neglected but photons that arrive anytime after the last threshold will be put into the last bin. Thus, there are as many bins as there are thresholds.\n",
    "\n",
    "Let's split a single photon into four bins defined by intervals (0, 1), (1, 2), (2, 3), and (3, $\\infty$)."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "1 0 0 0 | 0.63212\n",
      "0 0 1 0 | 0.08555\n",
      "0 1 0 0 | 0.23254\n",
      "0 0 0 1 | 0.04979\n",
      "\n"
     ]
    }
   ],
   "source": [
    "d = Detector.partition(thresholds=[0, 1, 2, 3])\n",
    "p = Processor() // Source.fock(1) // d\n",
    "p.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:26.374072Z",
     "start_time": "2024-02-14T23:01:26.298119Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "This shows that single photons display single-particle anti-bunching in time as well (in addition to the common spatial description using the Hanbury and Brown Twiss setup). Coherent states display no such behaviour."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "0 0 0 0 | 0.45817\n",
      "1 0 0 0 | 0.25635\n",
      "0 0 1 0 | 0.03910\n",
      "1 0 1 0 | 0.02188\n",
      "0 1 0 0 | 0.10466\n",
      "1 1 0 0 | 0.05856\n",
      "0 1 1 0 | 0.00893\n",
      "1 1 1 0 | 0.00500\n",
      "0 0 0 1 | 0.02277\n",
      "1 0 0 1 | 0.01274\n",
      "0 0 1 1 | 0.00194\n",
      "1 0 1 1 | 0.00109\n",
      "0 1 0 1 | 0.00520\n",
      "1 1 0 1 | 0.00291\n",
      "0 1 1 1 | 0.00044\n",
      "1 1 1 1 | 0.00025\n",
      "\n"
     ]
    }
   ],
   "source": [
    "d = Detector.partition(thresholds=[0, 1, 2, 3])\n",
    "p = Processor() // Source.shaped_laser(parameters={'amplitude':1}) // d\n",
    "p.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:26.458309Z",
     "start_time": "2024-02-14T23:01:26.383670Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "If one requires the time bins to not be adjacent, the explicit intervals can also be given as a list of lists."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "0 0     | 0.23865\n",
      "1 0     | 0.39347\n",
      "0 1     | 0.36788\n",
      "\n"
     ]
    }
   ],
   "source": [
    "d = Detector.partition(thresholds=[[0, 0.5], [1, float('inf')]])\n",
    "p = Processor() // Source.fock(1) // d\n",
    "p.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:26.504081Z",
     "start_time": "2024-02-14T23:01:26.460334Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [
    "Note that in this case there is a probability of observing no photons because there is a chance they are emitted between the two time bins (between $t=0.5$ and $t=1$).\n",
    "\n",
    "The measurement within each bin defaults to behave like a threshold detector, but we can specify a resolution to get number-resolving behaviour as well. Note that the resolution is applied to all detectors."
   ],
   "metadata": {
    "collapsed": false
   }
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pattern | Probability\n",
      "2 0     | 0.39958\n",
      "1 1     | 0.46509\n",
      "0 2     | 0.13533\n",
      "\n"
     ]
    }
   ],
   "source": [
    "d = Detector.partition(thresholds=[0, 1], resolution=2)\n",
    "p = Processor() // Source.fock(2) // d\n",
    "p.probs().display()"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2024-02-14T23:01:26.541845Z",
     "start_time": "2024-02-14T23:01:26.508745Z"
    }
   }
  },
  {
   "cell_type": "markdown",
   "source": [],
   "metadata": {
    "collapsed": false
   }
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
